import os
import requests
import azure.cognitiveservices.speech as speechsdk
import threading
import queue
import time
from flask import Flask, render_template_string, request, jsonify

# API anahtarı ve diğer yapılandırmalar
api_key = "ce0d41431c9c4d50a0f4f74fc03d4de0"  # Buraya Azure OpenAI API anahtarınızı ekleyin
endpoint = "https://s2t87654321a.openai.azure.com/"  # Buraya Azure OpenAI hizmet URL'nizi ekleyin
deployment = "custom-voice"  # Buraya Azure OpenAI model deployment adınızı ekleyin
region = "swedencentral"  # Buraya Azure hizmet bölgenizi ekleyin

# Speech SDK yapılandırması
speech_config = speechsdk.SpeechConfig(
    subscription=api_key,  # API anahtarınızı burada kullanın
    region=region  # Azure hizmet bölgenizi burada kullanın
)
speech_config.speech_recognition_language = "az-AZ"
speech_config.speech_synthesis_language = "az-AZ"
speech_config.speech_synthesis_voice_name = "az-AZ-BanuNeural"  # Örnek ses adı

# Mikrofonu kullanarak ses tanıma yapılandırması
audio_config = speechsdk.audio.AudioConfig(use_default_microphone=True)
speech_recognizer = speechsdk.SpeechRecognizer(speech_config, audio_config)

# Payload ve header'lar
headers = {
    "Content-Type": "application/json",
    "api-key": api_key,
}
payload = {
    "messages": [
        {
            "role": "system",
            "content": [
                {
                    "type": "text",
                    "text": "You are a friendly Azerbaijani language AI assistant that is hearing, speaking, and giving people information."
                }
            ]
        }
    ],
    "temperature": 0.5,
    "top_p": 0.95,
    "max_tokens": 4000
}

# API URL
ENDPOINT = f"{endpoint}/openai/deployments/{deployment}/chat/completions?api-version=2024-05-01-preview"

# Queue ve kontrol bayrakları
text_queue = queue.Queue()
stop_flag = threading.Event()
listening_flag = threading.Event()
speaking_flag = threading.Event()

def recognize_speech_async():
    def recognized_callback(evt):
        # Bu, tanınan metin mevcut olduğunda çağrılır
        if not speaking_flag.is_set():  # Eğer sistem konuşmuyor ise
            print(f"Tanınan metin: {evt.result.text}")
            if evt.result.text:
                text_queue.put(evt.result.text)
                listening_flag.clear()

    def session_stopped_callback(evt):
        print("Oturum durduruldu.")
        stop_flag.set()

    def canceled_callback(evt):
        print(f"CANCELED: Reason={evt.reason}")
        if evt.reason == speechsdk.CancellationReason.Error:
            print(f"Hata detayı={evt.error_details}")
        stop_flag.set()

    try:
        recognizer = speechsdk.SpeechRecognizer(speech_config=speech_config, audio_config=audio_config)
        recognizer.recognized.connect(recognized_callback)
        recognizer.session_stopped.connect(session_stopped_callback)
        recognizer.canceled.connect(canceled_callback)
        recognizer.start_continuous_recognition()
        print("Ses tanıma başlatıldı.")
    except Exception as e:
        print(f"Ses tanıma ayarlarında bir hata oluştu: {e}")
        stop_flag.set()

    return recognizer

def stop_recognition(recognizer):
    try:
        recognizer.stop_continuous_recognition()
        print("Ses tanıma durduruldu.")
    except Exception as e:
        print(f"Tanınmayı durdururken bir hata oluştu: {e}")
    finally:
        stop_flag.set()

def text_to_speech(text):
    audio_config = speechsdk.audio.AudioOutputConfig(use_default_speaker=True)
    synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config, audio_config=audio_config)

    try:
        speaking_flag.set()  # Konuşma başladığında flag'i ayarla
        result = synthesizer.speak_text(text)
        if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
            print("Sentez başarıyla tamamlandı.")
        else:
            print(f"Ses sentezi başarısız oldu: {result.reason}")
    except Exception as e:
        print(f"Ses sentezinde bir hata oluştu: {e}")
    finally:
        speaking_flag.clear()  # Konuşma bittiğinde flag'i sıfırla

def send_message(message):
    payload["messages"].append({
        "role": "user",
        "content": [{"type": "text", "text": message}]
    })
    try:
        response = requests.post(ENDPOINT, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        raise SystemExit(f"İstek gönderme başarısız oldu. Hata: {e}")

def handle_conversation():
    while not stop_flag.is_set():
        if not text_queue.empty():
            user_text = text_queue.get()
            if user_text.lower() == 'exit':
                print("Konuşma sona erdi.")
                stop_flag.set()
                break

            # Kullanıcı metnini AI'ye gönder
            response_data = send_message(user_text)
            assistant_message = response_data['choices'][0]['message']['content']

            # Asistanın yanıtını yazdır
            print("Asistanın Yanıtı:", assistant_message)

            # Asistanın yanıtını sesli olarak oynat
            text_to_speech(assistant_message)

def handle_unrecognized_input():
    while not stop_flag.is_set():
        if listening_flag.is_set():
            print("Üzgünüm, sizi anlayamadım. Lütfen tekrar edin.")
            text_to_speech("Üzgünüm, sizi anlayamadım. Lütfen tekrar edin.")
        time.sleep(5)

# Flask uygulaması
app = Flask(__name__)

@app.route('/')
def home():
    history = [
        {"role": "user", "text": "Salam, necəsiniz?"},
        {"role": "ai", "text": "Çox sağolun, yaxşıyam!"},
    ]
    
    intro_message = {
        "text": "Söhbət yeri komponenti üçün javascript demosu."
    }
    
    return render_template_string('''
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="UTF-8" />
        <link rel="stylesheet" href="./src/styles.css" />
      </head>
      <script
        type="module"
        src="https://unpkg.com/deep-chat@2.0.1/dist/deepChat.bundle.js"
      ></script>
      <body>
        <h1>Söhbət Yeri</h1>
        <deep-chat
          id="chat-element"
          demo="true"
          textInput='{"placeholder":{"text": "Demoya xoş gəldiniz!"}}'
          introMessage='{{ intro_message | tojson | safe }}'
        ></deep-chat>
      </body>
      <script type="module">
        const elementRef = document.getElementById("chat-element");
        elementRef.history = {{ history | tojson | safe }};
        elementRef.addEventListener('message', async (event) => {
          const response = await fetch('/chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ message: event.detail.text })
          });
          const data = await response.json();
          elementRef.addMessage({ role: 'ai', text: data.reply });
        });
      </script>
    </html>
    ''', history=history, intro_message=intro_message)

@app.route('/chat', methods=['POST'])
def chat():
    user_message = request.json.get('message')
    if not user_message:
        return jsonify({'reply': 'Mesajınız alınamadı.'}), 400

    # Kullanıcı metnini AI'ye gönder
    response_data = send_message(user_message)
    assistant_message = response_data['choices'][0]['message']['content']

    return jsonify({'reply': assistant_message})

if __name__ == '__main__':
    # Ses tanıma ve konuşma iş parçacıklarını başlat
    recognition_thread = threading.Thread(target=handle_conversation)
    unrecognized_input_thread = threading.Thread(target=handle_unrecognized_input)
    recognition_thread.start()
    unrecognized_input_thread.start()

    try:
        app.run(debug=True, use_reloader=False)  # use_reloader=False for threaded mode
    finally:
        stop_flag.set()
        recognition_thread.join()
        unrecognized_input_thread.join()
